import { default as runQuery } from "./run-query.js";
import { default as runUrl } from "./run-url.js";
import { parseArgs } from "./common/index.js";

export default async function () {
    const args = parseArgs({
        optional: {
            0: "commmand",
            1: "syphonx extract script file",
            2: "html file for offline processing",
            url: "specifies a url to fetch",
            show: "shows browser window",
            pause: "pause before or after extract",
            filter: "comma separated list of keys to filter output",
            offline: "force offline processing only",
            debug: "enable debug mode",
            id: "unique identifier for extract, autogenerated if not specified",
            query: "runs a query to obtain list of pages to fetch",
            after: "calls a procedure after all pages are fetched",
            onerror: "determines whether to insert data if there is an error (insert, skip, default=skip)",
            params: "override params",
            concurrency: "specifies number of pages to fetch concurrently",
            snooze: "time to snooze between pages from same domain",
            waituntil: "when to consider navigation complete: load, domcontentloaded, networkidle0, networkidle2",
            timeout: "navigation timeout in milliseconds (default=30000)",
            tag: "tags inserted data",
            out: "specifies output as default, html, json",
            insert: "specifies to insert to configured data target"
        },
        validate: args => {
            if (!args[1] && args.out !== "html" && !args.query)
                return "Specify a script file";
    
            if (args.pause && !args.show)
                args.show = "1";
        }
    });
 
    if (args.query)
        await runQuery(args);
    else
        await runUrl(args);
}
